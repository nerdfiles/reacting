////
/// @since 0.0.0-novel.0
/// @name nowhere
/// @group namespace
////

/// @name :root.
/// @filepath ./src/novel-component/index.scss
/// @group index
/// @author aha <patagnome@protonmail.com>
/// @todo passing lists to `@mixin`s like in grammuelle.
:root {}

/// @name body
body {}

/// @name #top
#top {}

/// @name .m-view--novel-component__default__, 
.m-view--novel-component__default__,
[className='m-view--novel-component__default__'] {

}

/// @name div
div {}
/// @name p
p {}

/// @name P
P {}

/// @name blockquote
blockquote {}

/// @name h1
h1 {}

/// @name h2, h3
h2, h3 {}

/// @name h3, h6
h3, h6 {}

/// @name form:not(:last-child), form[action='']
form:not(:last-child),
form[action=''] {
  outline: 1px solid rgba(25, 25, 25, 0);
}

/// @name form
form {}

/// @name fieldset
fieldset {}

/// @name input[type='text']
input[type='text'] {}

/// @name input[type='number']
input[type='number'] {}

/// @name input[type='password']
input[type='password'] {}

/// @name button
button {}

/// ```
///   (a)   `*=_ as ._`
///   (a.1) `._ as [class*='...']_` (assuming '*' and whatever name, '...')
///   (a.2) `._<ctrl+y,\leader> as [class=""]_<ctrl+y,\leader>` 
///   (a.3) `. as _` 
/// ```
///
/// > [(a.2) returns no tag output with emmet where `[class='_-']` 
/// literally does; namely `<div class="_-">_</div>`. `[class]` yields
/// with an empty `@class` style value.]
/// 
/// either way (a) and (a.1) where the latter presupposes emmet is applied,
/// where we expect 
/// 
/// ```
///   (b:emmet:@::[]) `<... @class "m-...--...__...__">...</...>`
/// ```
///
///   that is,
///
/// ```
///   (b) `<div class="m-...--...__...__">_</div>`
/// ```
/// 
/// rendered
/// 
/// ```
///    (c) <... class="m-...--...__...__">...</...>
/// ```
///
/// non-space-delimited names enable normative level of description for naming 
/// and semantics-driven code design in interaction modeling and processing.
/// 
/// ## naming
///
/// [controls].
///
/// ## stuff happening
///
/// 1. [servers exposed](https://www.darkreading.com/application-security/more-than-eight-in-10-kubernetes-api-servers-exposed-to-the-internet)
/// 2. [miners exposed](https://href.li/?https://medium.com/hackernoon/mapping-global-crypto-mining-w-shodan-io-7a174d18a327)
/// 3. [css hacks lately??](https://flylib.com/books/en/3.7.1.47/1/)
/// 4. the [accessbility of](https://monsido.com/blog/accessibility-statistics) and [for the inaccessible](https://abilitynet.org.uk/news-blogs/inaccessible-websites-keep-disabled-people-out-work-abilitynet-tells-government-taskforce)
///  
/// ## semantics-driven code design
///
/// [schema] and [punning].
///
/// > ... we make use of punning of an OWL metamodeling capability that allows 
/// > to treat model elements as classes and individual at the same time.
/// >
/// > "semantics-driven programming of self-adaptive reactive systems". [sdcd]
///
/// synechdoche, subscendence, metonymy, patanymy, pleonymy, ananymy, 
/// nomonymy, monotonymy, automorphism, echo, etc., *not* "[metaphor]" and 
/// "non-parodic [irony]" (*pretence*). y'know, the stuff happening in 
/// morphological linguistics.
///
/// > Although a metaphorical utterance can be prefaced with the phrase To 
/// > speak metaphorically, an ironical utterance cannot be prefaced with the 
/// > phrase To speak ironically.
/// >
/// > "irony and metarepresentation". wilson, deirdre.
/// 
/// ## panalogy
///
/// we consider a panalogy between [hypermedia-orientation][schema], in 
/// general, and [n-quad][controls]'s, in particular, presented `/...{?s,p,o,g}` 
/// formulation and atomic bem's `<...[class='a-b--e__m__'>`.
/// 
/// indeed, for `spog <> abem` with `emmet`,
/// 
/// ```
/// `/$$( element ){?s,p,o,g}` <> `<$$( element )[class="a-b--e__m__"]>`
/// ```
///
/// so, we can model all interactions in css to produce pure css carousels, 
/// etc., avoiding js traps like here [vitals] (see [trap] and [cachedjs])
///
/// by "[organic] bem" we consider "organs", "molecules", "atoms", which are 
/// combined with control flow terms like `if` and `for`. similarly, from 
/// a semantics-driven code design pattern modeling approach we can model
/// domain dependent roles of patterns for certain models, those "composite",
/// "flyweight", and "proxy" (or "subject").
///
/// 1. composite: "Leafs and their operations provide all domain dependent 
///    functionality. Everything else is just infrastructure allowing the 
///    hierarchical access to the leaf instances."
/// 2. flyweight: "Concrete Flyweight provides all domain dependent 
///    functionality. The rest is infrastructure for storing instances in 
///    memory providing access to them."
/// 3. proxy: "The domain dependent is the Real Sub ject (which often exists 
///    before Proxy pattern application) and functionality of Proxy 
///    participants that provide access to the Real Subject."
/// 4. e series??: (see aside)
///
/// <hr />
///
/// ## aside: e series time
///
/// ![e series. 'Time from Semiosis: E-series Time for Living Systems'. pg. 69](https://raw.githubusercontent.com/nerdfiles/reacting/develop/src/assets/content-images/e-series.png)
///
/// ![e series. 'Time from Semiosis: E-series Time for Living Systems'. pg. 70](https://raw.githubusercontent.com/nerdfiles/reacting/develop/src/assets/content-images/e-series-table.png)
///
/// `Real Subjects` or `Proxies` may participate in the *co-adjusting of time 
/// narrative ([sdrt][sdrt], etc.) or otherwise ([owl-time][time]). bi-temporal 
/// registers may realize novel formations and creatives elaborative of 
/// psychological [time][psych].
///
/// ![clock working functionality: "a good design is better than you think." re: the myth of the given; i.e., modality collapses the dichotomy of expertise](https://raw.githubusercontent.com/nerdfiles/reacting/develop/src/assets/content-images/clock-working-1.png)
///
/// ![clock working functionality: "money is more than memory." re: different logical orders](https://raw.githubusercontent.com/nerdfiles/reacting/develop/src/assets/content-images/clock-working-2.png)
///
/// so, second-person negotation with e-series supports system-level quality 
/// property contentions and their measurement, deployment, scale, suggested in
/// observing,
///
/// 1. accessibility
/// 2. availability
///   1. (see http status 451 etc. confusion or
/// misinterpretation; i.e., "banned" resources are not "inaccessible", they
/// are "unavailablee". accessibility is reserved for WCAG and ARIA namespaces;
/// most servers are configured inappropriately by default)
/// 3. multiple realizability
///   1. (time from semiosis; keeping time, keeping time
/// with others, definiteness in retrospect vs indefiniteness in prospect in
/// earlier/later relations, synchroactive, temporal cohesion, the
/// second-person negotiators of punctuation gestures and tense operators)
/// 4. universalizability
/// 5. specializability 
/// 6. concretizability
///
/// <hr /> 
///
/// (1) is often used in interaction models presenting tree structure: tree 
/// maps, proof trees, binary trees, file directory trees, etc. (2) can be 
/// used for domain dependent functionality pertaining to state management:
/// interaction counters, form submission and error handling, etc. (3) concerns
/// behaviors like creative, formative, adjustive, processive subscription and 
/// hooking behaviors (see [resthooks] and [activitypub][pub]). the idea is to think
/// less so in terms of "states" and rather in terms of "occasions." there's never 
/// really an `interactionCounter.count` set to `0`. it's "initial" value is
/// even in intuitive examples *given* to a context in which someone is perceptually
/// related to the output or the outcome of the program. `0` could very well depend
/// on whether or not the computer one is using hiccups or non-deterministically
/// pulls information from another peripheral. we don't have to suppose nefarious
/// hacking, only that `0` is not some answer we should fix our implementation
/// style to presuming. "0" is string to some, an integer to others: as web developers
/// we don't care when it comes to designing the interaction in affordance.
///
/// this posture of "data-agnosticism," if you will, allows web developers to
/// see "data as code": the "initial" value for an InteractionCounter could 
/// be anything, we could receive a script injection for all we know. the interface
/// will at times require to be sensitive to this possibility, a situation of occasion.
/// in most cases, inputs will have to be guarded by the interface from the server
/// and vice versa, from the client. in this way, the client can send attribute-level
/// information about itself for the server to determine its level of trustworthiness, 
/// and so too here, can the client. we can send `disabled="true"` along with HTTP POST
/// requests to "create" a "user" from some persons engaging with the API. in a sense,
/// our assumption is that the server is receptive to non-javascript clients. the server
/// tries to accomodate as many quality properties from the client, since the client
/// itself is a mixed domain of software, like web browsers, and the bespoke code 
/// corresponding to the server itself, the client. the client cannot be "trusted"
/// in proportion to those ranges of capabilities the server is not interested in
/// confirming nor understanding. a `disabled` state for a `<button>` may be interesting
/// but the operating system settings information about the CPU or peripherals may not
/// be (unless that's what the web service or product is *about*).
///  
/// <hr />
///
/// ![open problems](https://raw.githubusercontent.com/nerdfiles/reacting/develop/src/assets/content-images/open-problems.png)
/// 
/// ![examples of domain dependent roles of patterns](https://raw.githubusercontent.com/nerdfiles/reacting/develop/src/assets/content-images/examples-of-domain-dependent-roles-of-patterns.png)
///
/// > "semantics and model driven design patterns instantiation". kajsa, peter. [smddpi]
///
/// so, compare the singular name above: `...-...--...__...__`:
/// 
/// ```
/// [∼]StereotypeName::Meta-attributeName::value;
/// ```
///
/// that is,
///
/// ```
/// [...]...::...::...;
/// ```
///
/// looks familiar, i'm sure. this tells us that frontend developers really 
/// should be expected to answer questions about storage semantics, whether 
/// nosql is faster than sql for some accessible web "vital" or systematically-
/// enforced constraint or whatever else such pattern as "infinite scrolling" 
/// and "tabbed" interface. if semantics-driven code design is assumed for the
/// stylesheet, visual and visible design can be solved in a context without
/// dependence on other languages or technologies. carousels, modal windows,
/// accordians, and the rest of the interaction design space can be solved
/// through interaction modeling strictly in css for many classes of problems
/// once thought only solvable using javascript. we should good better at 
/// detecting their benefits in terms of adjustability, incremental consistency,
/// and traceability. these quality properties pertain to higher order fruits: 
/// specializability and concretizability. the quality properties relate to 
/// maintainability where the fruits, or emergent properties, pertain to estimation.
/// how do specializability and specialization influence organizational 
/// complexity and responsiveness to change within an organizational 
/// structure, particularly relative to decision-maker and stake-holder interests?
/// what is concretizable in the application? does concretization slow processes
/// of onboarding? between angular and reactjs, a solution space may exist independently 
/// of their implementation details which is continuation despite their presence. solution 
/// spaces possess characteristics some of which may not be optimal relative to
/// their combination with the limitations of language technologies or their goals in 
/// original language design. are components easy to adjust? trace? test? all such 
/// questions are implicated in daily planning and re-assessment of sprints or work 
/// works to be considered. it's also important to understand how adjustability,
/// consistency expectations of components, and traceability shape outcomes of 
/// maintainability and maintenance in a reliable way. tools for reporting css 
/// specificity can aid in revealing emergent complexity in stylesheet code relative 
/// to named components. the problem with "utility classing" components is that
/// the names assume a delivered ensemble of stylesheets at the document: any number
/// of class string values can appear anywhere in the document's tags: `grid:md` here,
/// `column-12` there, and `input-border-dashed` elsewhere. between these three 
/// names we've expressed the concept of a "grid", a "column", adaptiveness, 
/// layout, modality, and so much else. the "order" of these concepts or how they're 
/// intended to be used isn't explicit by the space-delimited grammar common 
/// to bootstrap, semanticui, tailwindcss, and the like: `Noun Noun Noun` is what
/// is being communicated at the level of specializability and concretizability. "activity"
/// as such has to be read from the styleesheet. at once, the posture of not wishing to
/// open a "css" file jointly with an "html" file, reading and jumping between the two files,
/// is not benefitted by employing the "utility classing" approach in 
/// authorship *if* one is unfamiliar with the codebase. "column-small" doesn'
/// t tell us what whatever is being made "small" is being made "small" 
/// relative to, and if the markup surrounding that "small" element, after parsing and 
/// processing, is not telling about what is to occur at the moment of reading, or readability.
/// a developer can read `column-small column-medium ...` but this tells us nothing 
/// about the context of application or presentation, how it was served, nor anything 
/// about how to trace it if it doesn't work out and we must adjust it. a developer 
/// may well take to `grep` and flagging down other bits of code if they seek
/// to understand how it fits in as a feature, but again now multiple files must be opened.
/// "utility" class frameworks are great for jotting out stylesheet code only to 
/// forget about it not worrying about "evolution" of the design. about the only person
/// who can become a specialist in such code, even immediately after authorship, is the person
/// who wrote it. like a car loses value immediately upon leaving the lot,
/// code by "utility" classes in documents like html barely enable developers to 
/// "pick up" where they left off in comprehending it, specializing in it, detecting
/// its concretizations, and so on. it's code that isn't "hard" like a rock, which
/// we would be able to look at, study['comma] change['comma] and improve in a reliable way. so, 
/// there are independent reasons for rejecting "utility" frameworks, and which
/// partially explain why they have yet to payout for increasing the accessibility
/// of the web. such frameworks reintroduce all patterns of using html tags 
/// for presentation, only they do so at the class attribute moment in authoring 
/// web documents. tags for presentation does not scale; doing the same thing 
/// with class attribute strings is equally unscalable.
///
/// html has various "presentational" tags; e.g., `<font>`. using a class 
/// `text-color-red` is no different from using html for this purpose. this 
/// is the key antipattern: misuse by purpose. it's not just that the class
/// being there doesn't achieve the end in question, applying some style to 
/// an element, but it's that *how* it's solved is out of sorts with 
/// scaling the interface as much as out of sort with the goal of html itself.
///
/// it goes without saying that also, if javascript is used at all, the developer
/// must code out treating `text-color-red` and whatever other "classes" may
/// appear *in javascript* whereas the splitting of similarity and difference
/// in decomposing the behavior in question can be done *in css* prior to 
/// solving the interaction problem in the first place.
///
/// ## "functional css"
///
/// 1. "lambda" css [lispcast]
/// 2. "functional" css [funcss]
/// 3. "declarative" css [deccss]
///
/// the concept of declarative, disorderly programming invites semantic design 
/// to model monotonymy and monotonicity. a case for monotonymy is the related
/// metonymy, or "[punning]". monotonymy, then, would be considerable as 
/// "semantic descent" and "ascent", whereby figurativeness (conduiticity) and 
/// literalness (metonymy) shape the steady rate of language adoption norms or 
/// patterns, normative grounding, as it were. here we can conceptualize 
/// monotonicity as domain specificity qua specializability (learnability: 
/// incrementation, or incremental mediation, purification, translation) and 
/// concretizability (trainability: traceability and adjustability).
///
/// a [defense].
///
/// ### antipatterns
///
/// 1. https://lispcast.com/css-and-the-lambda-calculus/
/// 2. https://rangle.io/blog/styling-with-functional-css/
/// 3. https://critter.blog/2018/06/08/in-defense-of-functional-css/
///
/// [perf]: https://www.webperf.tips/tip/performance-timing-markers/
/// [punning]: https://www.w3.org/TR/owl2-new-features/#F12:_Punning
/// [lispcast]: https://lispcast.com/css-and-the-lambda-calculus/
/// [funcss]: https://rangle.io/blog/styling-with-functional-css/
/// [deccss]: http://lambda-the-ultimate.org/node/4222
/// [defense]: https://critter.blog/2018/06/08/in-defense-of-functional-css/
///
/// ## footnotes
///
/// capital's primal desire is slavery not (just) exploitation. a desire for the 
/// disgust of disgust betrays the undecidable boundary between the visible 
/// and the visual. the historical skepticism follows from there existing no 
/// reliable theorem for determining where and when slaveness and blackness
/// originally bifurcated from an original antagonism. what were the mappings
/// onto itself relaying an irony? there could not have been. historical 
/// justifications arrived too with any people so disposed to accumulate
/// by the nature of money. cheap desire, cheap money, and cheap irony:
/// 
/// (links in markdown)
/// 
/// [vitals]: https://web.dev/patterns/web-vitals-patterns/carousels/
/// [resthooks]: https://resthooks.org
/// [pub]: https://www.w3.org/TR/activitypub/#create-activity-outbox
/// [trap]: https://www.gnu.org/philosophy/javascript-trap.html
/// [cachedjs]: https://www.webperf.tips/tip/cached-js-misconceptions/
/// [controls]: https://linkeddatafragments.org/specification/quad-pattern-fragments/#controls
/// [schema]: https://apisyouwonthate.com/blog/common-hypermedia-patterns-with-json-hyper-schema
/// [sdcd]: https://www.worldscientific.com/doi/10.1142/S0218194020400082
/// [irony]: https://www.researchgate.net/publication/223333203_The_pragmatics_of_verbal_irony_Echo_or_pretence 
/// [metaphor]: https://www.cambridge.org/core/journals/language-and-cognition/article/metonymies-are-more-literal-than-metaphors-evidence-from-ratings-of-german-idioms/1CBBCFF893235E161608B6834860FA69
/// [punning]: https://www.w3.org/TR/owl2-new-features/#F12:_Punning
/// [organic]: https://krasimir.github.io/organic-css/
/// [smddpi]: http://acmbulletin.fiit.stuba.sk/vol5num1/kajsa.pdf
/// [sdrt]: https://www.slideserve.com/chelsey/segmented-discourse-representation-theory-a-theory-of-discourse-interpretation
/// [time]: https://www.w3.org/TR/owl-time/
/// [psych]: https://pubmed.ncbi.nlm.nih.gov/23167123/
///
/// @group namespace
/// @name index.css:molecule (in emmet: `.m-`, `[class="m-"]`; in html: `class="m-"`; in css: `.m- {}`, `div[classname*='m-'] {}`)
/// @summary css molecule for an infocule. with what must the logging console 
/// begin?
///
/// @example
/// [class]*3<emmet:ctrl+y,\leader>
/// <div class="">_</div>
/// <div class="">_</div>
/// <div class="">_</div>
/// @example
/// [class="m..."]*3<emmet:ctrl+y,\leader>
/// <div class="m">_</div><!-- we're describing molecular style -->
/// <div class="m-..."></div><!-- describing molecular block style -->
/// <div class="m-...--..."></div><!-- describing {m...b} elemental style -->
/// <div class="m-...--...__...__"></div><!-- describing {m...b, b...e} style modes -->
///
/// # what's workable?
/// 
/// (purposeful style follows this comment section; e.g., in `emmet`:
/// `[class="m"]`. consider this a "scratch" area in the stylesheet since it's
/// taking place after the `\@\example` above)
///
/// ```
/// (a)mixin apply($s, $a) { @include $s($a); }
/// ```
///
/// lispcast claims [invalidity]. what's "invalid" here if `$a` is a list, not an 
/// object? why does interpolation just work?
///
/// perfectly valid.
///
/// ```perfectly-valid.scss
/// $ATOMS: "ATOMS";
/// $DEFAULTS: ();
/// $ATTRS: (--a, --R, --b,)
/// 
/// (a)mixin apply($s, $a) {
///   @include $s($a);
///   // ———
///   .#{$ATOMS} () {}
///   // @include #{$ATOMS}($ATTRS); // interpolation is invalid??
/// }
/// ```
///
/// and:
/// 
/// ```still-perfectly-valid.scss
/// (a)mixin SCOPE ($a, $R, $b) {
///   @include ATOMS($DEFAULTS); // anyway: a but of 
/// }
/// 
/// // ... "later" in a file ...
/// (a)include SCOPE('', '', '');
/// 
/// // (a)see https://krasimir.github.io/organic-css/
///
/// (a)mixin header {
///     @include atoms((
///         block,
///         clearfix,
///         font-family
///     ));
/// }
/// ```
/// 
/// [invalidity]: https://lispcast.com/css-and-the-lambda-calculus/

.m,
div[classname*='m-'] {
  background-color: silver;
}

// EOF
