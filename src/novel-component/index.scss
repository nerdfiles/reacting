////
/// .
/// @filepath ./src/novel-component/index.scss
/// @group index
/// @author aha <patagnome@protonmail.com>
////
:root {}

body {}

#top {}

.m-view--novel-component__default__,
[className='m-view--novel-component__default__'] {

}

div {}
p {}
P {}

blockquote {}

h1 {}
h2, h3 {}
h3, h6 {}

form:not(:last-child),
form[action=''] {
  outline: 1px solid rgba(25, 25, 25, 0);
}
form {}
fieldset {}
input[type='text'] {}
input[type='number'] {}
input[type='password'] {}
button {}

/// ```
///   (a)   `*=_ as ._`
///   (a.1) `._ as [class*='...']_` (assuming '*' and whatever name, '...')
///   (a.2) `._<ctrl+y,\leader> as [class='']_<ctrl+y,\leader>`/ 
///   (a.3) `. as _`/ 
/// ```
///
/// > [(a.2) returns no tag output with emmet where `[class='_-']` 
/// literally does; namely `<div class="_-">_</div>`. `[class]` yields
/// with an empty `@class` style value.]
/// 
/// either way (a) and (a.1) where the latter presupposes emmet is applied,
/// where we expect 
/// 
/// ```
///   (b:emmet:@::[]) `<... @class "m-...--...__...__">...</...>`
/// ```
///
///   that is,
///
/// ```
///   (b) `<div class="m-...--...__...__">_</div>`
/// ```
/// 
/// rendered
/// 
/// ```
///    (c) <... class="m-...--...__...__">...</...>
/// ```
///
/// non-space-delimited names enable normative level of description for naming 
/// and semantics-driven code design in interaction modeling and processing.
/// 
/// ## naming
///
/// [controls].
///  
/// ## semantics-driven code design
///
/// [schema] and [punning].
///
/// > ... we make use of punning of an OWL metamodeling capability that allows 
/// > to treat model elements as classes and individual at the same time.
/// >
/// > "semantics-driven programming of self-adaptive reactive systems". [sdcd]
///
/// synechdoche, subscendence, metonymy, patanymy, pleonymy, ananymy, 
/// nomonymy, monotonymy, automorphism, echo, etc., *not* "[metaphor]" and 
/// "non-parodic [irony]" (*pretence*). y'know, the stuff happening in 
/// morphological linguistics.
///
/// > Although a metaphorical utterance can be prefaced with the phrase To 
/// > speak metaphorically, an ironical utterance cannot be prefaced with the 
/// > phrase To speak ironically.
/// >
/// > "irony and metarepresentation". wilson, deirdre.
/// 
/// ## panalogy
///
/// we consider a panalogy between [hypermedia-orientation][schema], in 
/// general, and [n-quad][controls]'s, in particular, presented `/...{?s,p,o,g}` 
/// formulation and atomic bem's `<...[class='a-b--e__m__'>`.
/// 
/// indeed, for `spog <> abem` with `emmet`,
/// 
/// ```
/// `/$$( element ){?s,p,o,g}` <> `<$$( element )[class="a-b--e__m__"]>`
/// ```
///
/// so, we can model all interactions in css to produce pure css carousels, 
/// etc., avoiding js traps like here [vitals] (see [trap] and [cachedjs])
///
/// by "organic bem" we consider "organs", "moleculars", "atoms", which are 
/// combined with control flow terms like `if` and `for`. similarly, from 
/// a semantics-driven code design pattern modeling approach we can model
/// domain dependent roles of patterns for certain models, those "composite",
/// "flyweight", and "proxy" (or "subject").
///
/// 1. composite: "Leafs and their operations provide all domain dependent 
///    functionality. Everything else is just infrastructure allowing the 
///    hierarchical access to the leaf instances."
/// 2. flyweight: "Concrete Flyweight provides all domain dependent 
///    functionality. The rest is infrastructure for storing instances in 
///    memory providing access to them."
/// 3. proxy: "The domain dependent is the Real Sub ject (which often exists 
///    before Proxy pattern application) and functionality of Proxy 
///    participants that provide access to the Real Subject."
///
/// (1) is often used in interaction models presenting tree structure: tree 
/// maps, proof trees, binary trees, file directory trees, etc. (2) can be 
/// used for domain dependent functionality pertaining to state management:
/// interaction counters, form submission and error handling, etc. (3) concerns
/// behaviors like creative, formative, adjustive, processive subscription and 
/// hooking behaviors (see [resthooks] and [activitypub]). the idea is to think
/// less so in terms of "states" and rather in terms of "occasions." there's never 
/// really an `interactionCounter.count` set to `0`. it's "initial" value is
/// even in intuitive examples *given* to a context in which someone is perceptually
/// related to the output or the outcome of the program. `0` could very well depend
/// on whether or not the computer one is using hiccups or non-deterministically
/// pulls information from another peripheral. we don't have to suppose nefarious
/// hacking, only that `0` is not some answer we should fix our implementation
/// style to presuming. "0" is string to some, an integer to others: as web developers
/// we don't care when it comes to designing the interaction in affordance.
///
/// this posture of "data-agnosticism," if you will, allows web developers to
/// see "data as code": the "initial" value for an InteractionCounter could 
/// be anything, we could receive a script injection for all we know. the interface
/// will at times require to be sensitive to this possibility, a situation of occasion.
/// in most cases, inputs will have to be guarded by the interface from the server
/// and vice versa, from the client. in this way, the client can send attribute-level
/// information about itself for the server to determine its level of trustworthiness, 
/// and so too here, can the client. we can send `disabled="true"` along with HTTP POST
/// requests to "create" a "user" from some persons engaging with the API. in a sense,
/// our assumption is that the server is receptive to non-javascript clients. the server
/// tries to accomodate as many quality properties from the client, since the client
/// itself is a mixed domain of software, like web browsers, and the bespoke code 
/// corresponding to the server itself, the client. the client cannot be "trusted"
/// in proportion to those ranges of capabilities the server is not interested in
/// confirming nor understanding. a `disabled` state for a `<button>` may be interesting
/// but the operating system settings information about the CPU or peripherals may not
/// be (unless that's what the web service or produce is *about*).
///  
/// <hr />
///
/// ![open problems](https://raw.githubusercontent.com/nerdfiles/reacting/develop/src/assets/content-images/open-problems.png)
/// 
/// ![examples of domain dependent roles of patterns](https://raw.githubusercontent.com/nerdfiles/reacting/develop/src/assets/content-images/examples-of-domain-dependent-roles-of-patterns.png)
///
/// > "semantics and model driven design patterns instantiation". kajsa, peter. [smddpi]
///
/// ## footnotes
/// 
/// (links in markdown)
/// 
/// [vitals]: https://web.dev/patterns/web-vitals-patterns/carousels/
/// [resthooks]: https://resthooks.org
/// [pub]: https://www.w3.org/TR/activitypub/#create-activity-outbox
/// [trap]: https://www.gnu.org/philosophy/javascript-trap.html
/// [cachedjs]: https://www.webperf.tips/tip/cached-js-misconceptions/
/// [controls]: https://linkeddatafragments.org/specification/quad-pattern-fragments/#controls
/// [schema]: https://apisyouwonthate.com/blog/common-hypermedia-patterns-with-json-hyper-schema
/// [sdcd]: https://www.worldscientific.com/doi/10.1142/S0218194020400082
/// [irony]: https://www.researchgate.net/publication/223333203_The_pragmatics_of_verbal_irony_Echo_or_pretence 
/// [metaphor]: https://www.cambridge.org/core/journals/language-and-cognition/article/metonymies-are-more-literal-than-metaphors-evidence-from-ratings-of-german-idioms/1CBBCFF893235E161608B6834860FA69
/// [punning]: https://www.w3.org/TR/owl2-new-features/#F12:_Punning
/// [smddpi]: http://acmbulletin.fiit.stuba.sk/vol5num1/kajsa.pdf
/// @name index.css:molecule (class="m", class="m-...")
/// @summary css molecule for an infocule. with what must the logging console 
/// begin?
/// @example
/// [class]*3<emmet:ctrl+y,\leader>
/// <div class="">_</div>
/// <div class="">_</div>
/// <div class="">_</div>
/// @example
/// [class="m..."]*3<emmet:ctrl+y,\leader>
/// <div class="m">_</div><!-- we're describing molecular style -->
/// <div class="m-..."></div><!-- describing molecular block style -->
/// <div class="m-...--..."></div><!-- describing {m...b} elemental style -->
/// <div class="m-...--...__...__"></div><!-- describing {m...b, b...e} style modes -->
.m,
div[className*='m-'] {
  background-color: silver;
}

// EOF
